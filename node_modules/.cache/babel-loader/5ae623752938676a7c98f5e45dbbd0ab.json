{"ast":null,"code":"var _jsxFileName = \"/Users/sballesteros/Documents/D-path/src/forms/MainForm.js\";\nimport React, { Component } from 'react';\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport OrganizationForm from './OrganizationForm';\nimport DataProcessingForm from './DataProcessingForm';\nimport DataUsersForm from './DataUsersForm';\nimport DataDonorsForm from './DataDonorsForm';\nimport Success from './Success';\nimport InfoTable from './InfoTable';\nimport PersonalInfo from './PersonalInfo';\nimport UserInfo from './UserInfo';\n\nclass MainForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.nextStep = () => {\n      const {\n        step\n      } = this.state;\n      this.setState({\n        step: step + 1\n      });\n      if (this.state.step == 5) this.createLocationArray();\n    };\n\n    this.prevStep = () => {\n      const {\n        step\n      } = this.state;\n      this.setState({\n        step: step - 1\n      });\n    };\n\n    this.handleLocChange = input => {\n      var {\n        data,\n        locations\n      } = this.state;\n\n      for (var i in data) {\n        if (data[i].type == input.type) {\n          data[i] = {\n            type: input.type,\n            location: input.location,\n            print: input.print\n          };\n          this.setState({\n            data: data,\n            isLocationKnown: true,\n            currentForm: input.type\n          });\n        }\n      }\n    };\n\n    this.handleInfoChange = input => {\n      this.setState({\n        isPersonalInfo: input,\n        isInfoKnown: true\n      });\n    };\n\n    this.handleUserChange = input => {\n      this.setState({\n        userType: input,\n        isUserKnown: true\n      });\n    };\n\n    this.createLocationArray = () => {\n      const {\n        data\n      } = this.state;\n      var locations = [];\n      data.forEach(item => {\n        if (!locations.includes(item) && item != 'Non-Europe') locations.push(item);\n      });\n      this.setState({\n        locations: locations\n      });\n      console.log(locations);\n    };\n\n    this.getLocationComponent = () => {\n      const {\n        step\n      } = this.state;\n      var Form, currentForm;\n\n      switch (step) {\n        case 0:\n          Form = UserInfo;\n          currentForm = 'userType';\n          break;\n\n        case 1:\n          Form = OrganizationForm;\n          currentForm = 'organization';\n          break;\n\n        case 2:\n          Form = DataProcessingForm;\n          currentForm = 'dataProcessed';\n          break;\n\n        case 3:\n          Form = DataUsersForm;\n          currentForm = 'dataUsers';\n          break;\n\n        case 4:\n          Form = DataDonorsForm;\n          currentForm = 'dataDonors';\n          break;\n\n        case 5:\n          Form = PersonalInfo;\n          currentForm = 'personalInfo';\n          break;\n\n        case 6:\n          Form = Success;\n          currentForm = 'sucess';\n          break;\n      }\n\n      return Form;\n    };\n\n    this.state = {\n      step: 0,\n      isUserKnown: false,\n      userType: '',\n      isInfoKnown: false,\n      isPersonalInfo: false,\n      locations: [],\n      currentForm: 'organization',\n      data: [{\n        type: 'organization',\n        print: 'Where is the organization?',\n        location: ''\n      }, {\n        type: 'dataProcessed',\n        print: 'Where is the data processed?',\n        location: ''\n      }, {\n        type: 'dataUsers',\n        print: 'Where are the data users?',\n        location: ''\n      }, {\n        type: 'dataDonors',\n        print: 'Where are the data donors?',\n        location: ''\n      }]\n    };\n  }\n\n  render() {\n    const {\n      step,\n      isUserKnown,\n      userType,\n      data,\n      locations,\n      currentForm\n    } = this.state;\n    const Component = this.getLocationComponent();\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Component, {\n      nextStep: this.nextStep,\n      prevStep: this.prevStep,\n      handleLocChange: this.handleLocChange,\n      handleInfoChange: this.handleInfoChange,\n      handleUserChange: this.handleUserChange,\n      locations: locations,\n      currentForm: currentForm,\n      userType: userType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(InfoTable, {\n      values: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default MainForm;","map":{"version":3,"sources":["/Users/sballesteros/Documents/D-path/src/forms/MainForm.js"],"names":["React","Component","Container","Jumbotron","OrganizationForm","DataProcessingForm","DataUsersForm","DataDonorsForm","Success","InfoTable","PersonalInfo","UserInfo","MainForm","constructor","props","nextStep","step","state","setState","createLocationArray","prevStep","handleLocChange","input","data","locations","i","type","location","print","isLocationKnown","currentForm","handleInfoChange","isPersonalInfo","isInfoKnown","handleUserChange","userType","isUserKnown","forEach","item","includes","push","console","log","getLocationComponent","Form","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Container, Jumbotron} from 'react-bootstrap';\n\nimport OrganizationForm from './OrganizationForm';\nimport DataProcessingForm from './DataProcessingForm';\nimport DataUsersForm from './DataUsersForm';\nimport DataDonorsForm from './DataDonorsForm';\nimport Success from './Success';\nimport InfoTable from './InfoTable';\nimport PersonalInfo from './PersonalInfo';\nimport UserInfo from './UserInfo';\n\nclass MainForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            step: 0,\n            isUserKnown: false,\n            userType: '',\n            isInfoKnown: false,\n            isPersonalInfo: false,\n            locations: [],\n            currentForm: 'organization',\n            data: [\n              { type: 'organization',\n                print: 'Where is the organization?',\n                location: '',\n               },\n              { type: 'dataProcessed',\n                print: 'Where is the data processed?',\n                location: '',\n              },\n              { type: 'dataUsers',\n                print: 'Where are the data users?',\n                location: '',\n              },\n              {\n                type: 'dataDonors',\n                print: 'Where are the data donors?',\n                location: '',\n              },\n            ]\n        }\n    }\n\n    nextStep = () => {\n        const { step } = this.state;\n        this.setState({\n            step : step + 1\n        });\n        if(this.state.step == 5) this.createLocationArray();\n    }\n\n    prevStep = () => {\n      const { step } = this.state;\n        this.setState({\n            step : step - 1\n        });\n    }\n\n    handleLocChange = (input) => {\n      var { data, locations } = this.state;\n      for (var i in data) {\n         if (data[i].type == input.type) {\n           data[i] = {\n                type:input.type,\n                location: input.location,\n                print:input.print,\n            }\n            this.setState({\n              data : data,\n              isLocationKnown: true,\n              currentForm: input.type\n            });\n         }\n      }\n    }\n\n    handleInfoChange  = (input) => {\n      this.setState({\n        isPersonalInfo: input,\n        isInfoKnown: true\n      });\n    }\n\n    handleUserChange  = (input) => {\n      this.setState({\n        userType: input,\n        isUserKnown: true\n      });\n    }\n\n    createLocationArray = () => {\n      const { data } = this.state;\n      var locations = [];\n      data.forEach(item => {\n        if(!locations.includes(item) && item != 'Non-Europe') locations.push(item);\n      });\n      this.setState({ locations: locations });\n      console.log(locations);\n    }\n\n    getLocationComponent = () => {\n      const { step } = this.state;\n      var Form, currentForm;\n      switch(step) {\n      case 0:\n          Form = UserInfo;\n          currentForm = 'userType';\n          break;\n      case 1:\n          Form = OrganizationForm;\n          currentForm = 'organization';\n          break;\n      case 2:\n          Form = DataProcessingForm;\n          currentForm = 'dataProcessed';\n          break;\n      case 3:\n          Form = DataUsersForm;\n          currentForm = 'dataUsers';\n          break;\n      case 4:\n          Form = DataDonorsForm;\n          currentForm = 'dataDonors';\n          break;\n      case 5:\n          Form = PersonalInfo;\n          currentForm = 'personalInfo';\n          break;\n      case 6:\n          Form = Success;\n          currentForm = 'sucess';\n          break;\n      }\n      return Form;\n    }\n\n    render(){\n        const {step, isUserKnown, userType, data, locations, currentForm} = this.state;\n        const Component = this.getLocationComponent();\n        return(\n        <Container>\n          <div>\n            <Jumbotron>\n              <Component\n                nextStep={this.nextStep}\n                prevStep={this.prevStep}\n                handleLocChange={this.handleLocChange}\n                handleInfoChange={this.handleInfoChange}\n                handleUserChange={this.handleUserChange}\n                locations= {locations}\n                currentForm={currentForm}\n                userType={userType}\n              />\n            </Jumbotron>\n            <InfoTable values={data}/>\n          </div>\n        </Container>)\n    }\n}\n\nexport default MainForm;\n"]},"metadata":{},"sourceType":"module"}